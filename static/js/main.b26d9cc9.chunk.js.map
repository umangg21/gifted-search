{"version":3,"sources":["service/GiphyService.js","components/common/Loading.jsx","assets/icons.js","components/common/SearchInput.jsx","components/GifyView.jsx","components/common/Toggle.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["API_KEY","BASE_URL","LIMIT","getRequestUrl","offset","query","GiphyService","fetch","method","Loading","id","className","SearchIcon","props","width","height","viewBox","style","fill","color","d","SunIcon","MoonIcon","React","memo","title","autoComplete","disabled","readOnly","placeholder","onBlur","onFocus","ref","name","autoFocus","value","minLength","maxLength","onChange","e","state","context","target","setState","forceUpdate","afterInput","onKeyPress","keyCode","charCode","which","onSubmit","pattern","required","isNotRequired","type","hidden","GifyView","playPause","giphy","video","document","getElementById","paused","play","pause","showControls","this","onClick","onEnded","onLoadedData","src","images","fixed_width","mp4","Component","nodeName","onToggle","isChecked","htmlFor","checked","Search","getGipyhs","isLoading","isError","searchQuery","getGifs","then","response","json","result","newList","data","giphyList","concat","catch","error","handleScroll","window","onscroll","Math","ceil","innerHeight","pageYOffset","body","scrollHeight","toggleDarkMode","darkMode","getElementsByTagName","initial","addEventListener","map","key","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","URL","process","href","origin","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b26d9cc9.chunk.js","sourcesContent":["\nconst API_KEY = \"58OcTlBlb6wwZcuVIyutkk0C0Tt5wJUR\"\nconst BASE_URL = \"https://api.giphy.com/v1/gifs/search\"\nconst LIMIT = 25\n\n\nfunction getRequestUrl(offset = 0, query = \"\") {\n    return `${BASE_URL}?api_key=${API_KEY}&q=${query}&limit=${LIMIT}&offset=${offset}&rating=G&lang=en`;\n}\n\nexport class GiphyService {\n\n    static async getGifs(offset, query) {\n        return fetch(getRequestUrl(offset, query),\n            {\n                method: `get`,\n            })\n    };\n}","import React from 'react'\n\nconst Loading = () => <div id=\"loader\" className=\"parent-loader\" >\n    <div className=\"loading-circle\" />\n</div>\n\nexport default Loading;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nconst iconPropTypes = {\n    color: PropTypes.string,\n    height: PropTypes.number,\n    width: PropTypes.number\n};\n\nexport const SearchIcon = (props) => <svg width={props.height || 24} height={props.width || 24} viewBox=\"0 0 24 24\">\n    <g>\n        <path style={{ fill: props.color || '#222' }}\n            d=\"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" />\n    </g>\n</svg>;\n\nSearchIcon.propTypes = iconPropTypes;\n\n\nexport const SunIcon = (props) => <svg width={props.height || 24} height={props.width || 24} viewBox=\"0 0 24 24\">\n    <g>\n        <path style={{ fill: props.color || '#797979' }}\n            d=\"M3.55,18.54L4.96,19.95L6.76,18.16L5.34,16.74M11,22.45C11.32,22.45 13,22.45 13,22.45V19.5H11M12,5.5A6,6 0 0,0 6,11.5A6,6 0 0,0 12,17.5A6,6 0 0,0 18,11.5C18,8.18 15.31,5.5 12,5.5M20,12.5H23V10.5H20M17.24,18.16L19.04,19.95L20.45,18.54L18.66,16.74M20.45,4.46L19.04,3.05L17.24,4.84L18.66,6.26M13,0.55H11V3.5H13M4,10.5H1V12.5H4M6.76,4.84L4.96,3.05L3.55,4.46L5.34,6.26L6.76,4.84Z\" />\n    </g>\n</svg>;\n\nSunIcon.propTypes = iconPropTypes;\n\n\nexport const MoonIcon = (props) => <svg width={props.height || 24} height={props.width || 24} viewBox=\"0 0 24 24\">\n    <g>\n        <path style={{ fill: props.color || '#797979' }}\n            d=\"M17.75,4.09L15.22,6.03L16.13,9.09L13.5,7.28L10.87,9.09L11.78,6.03L9.25,4.09L12.44,4L13.5,1L14.56,4L17.75,4.09M21.25,11L19.61,12.25L20.2,14.23L18.5,13.06L16.8,14.23L17.39,12.25L15.75,11L17.81,10.95L18.5,9L19.19,10.95L21.25,11M18.97,15.95C19.8,15.87 20.69,17.05 20.16,17.8C19.84,18.25 19.5,18.67 19.08,19.07C15.17,23 8.84,23 4.94,19.07C1.03,15.17 1.03,8.83 4.94,4.93C5.34,4.53 5.76,4.17 6.21,3.85C6.96,3.32 8.14,4.21 8.06,5.04C7.79,7.9 8.75,10.87 10.95,13.06C13.14,15.26 16.1,16.22 18.97,15.95M17.33,17.97C14.5,17.81 11.7,16.64 9.53,14.5C7.36,12.31 6.2,9.5 6.04,6.68C3.23,9.82 3.34,14.64 6.35,17.66C9.37,20.67 14.19,20.78 17.33,17.97Z\" />\n    </g>\n</svg>;\n\nMoonIcon.propTypes = iconPropTypes;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SearchIcon } from \"../../assets/icons\";\n\nconst SearchInput = (props) => <div>\n    <div className=\"form-group\">\n        <input className={\"searchBox\"}\n            id=\"searchInput\"\n            title=\"Search typing to search giphy and press Enter\"\n            autoComplete=\"off\"\n            disabled={props.disabled}\n            readOnly={props.readOnly}\n            placeholder={props.placeholder}\n            onBlur={props.onBlur}\n            onFocus={props.onFocus}\n            ref={props.ref}\n            name={props.name}\n            autoFocus={props.autoFocus}\n            value={props.value}\n            minLength={props.minLength}\n            maxLength={props.maxLength}\n            onChange={(e) => {\n                const { state } = props.context;\n                state[props.name] = e.target.value;\n                state[\"offset\"] = 0;\n                props.context.setState(state);\n                props.context.forceUpdate();\n                if (props.afterInput)  //for comparing old and new values\n                    props.afterInput(props.value, e.target.value, e);\n            }}\n            onKeyPress={(e) => {\n                if (e.keyCode === 13 || e.charCode === 13 || e.which === 13) {\n                    props.onSubmit()\n                }\n            }}\n            pattern={props.pattern}\n            required={!props.isNotRequired} />\n\n        <input type=\"submit\" hidden />\n        <div className=\"searchIcon\">\n            <SearchIcon color={\"#888\"} />\n        </div>\n    </div>\n\n</div>;\n\nexport default React.memo(SearchInput);\n\nSearchInput.propTypes = {\n    className: PropTypes.string,\n    context: PropTypes.object,\n    placeHolder: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    pattern: PropTypes.string,\n    minLength: PropTypes.number,\n    maxLength: PropTypes.number,\n    beforeInput: PropTypes.func,\n    afterInput: PropTypes.func,\n    dontSaveInPayload: PropTypes.bool,\n    autoFocus: PropTypes.bool\n};","import React, { Component } from 'react'\n\nexport default class GifyView extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            play: false,\n            showControls: false\n        }\n    }\n\n    playPause = () => {\n        const { giphy } = this.props\n        var video = document.getElementById(giphy.id);\n        if (video && video.paused) {\n            video.play()\n        }\n        else if(video && video.play){\n            video.pause()\n        }\n        this.setState({ play: !this.state.play })\n    }\n\n    render() {\n\n        const { giphy } = this.props\n        return (\n            <div className=\"giphy-view-container\" onClick={this.playPause}>\n                <video id={giphy.id} style={{ width: `100%` }}\n                    onEnded={() => this.setState({ play: !this.state.play })}\n                    onLoadedData={() => this.setState({ showControls: true })}>\n                    <source src={giphy.images.fixed_width.mp4} type=\"video/mp4\" />\n                </video>\n                {\n                    this.state.showControls\n                    &&\n                    <div>\n                        <button className=\"giphy-button\" >{this.state.play ? \"Pause\" : \"Play\"}</button>\n                    </div>\n                }\n            </div>\n\n        )\n    }\n}\n","import React from 'react'\n\nconst Toggle = (props) => {\n    return (\n        <div id=\"toggleContainer\" onClick={(e) => {\n            if (e.target.nodeName === \"SPAN\")\n                props.onToggle(!props.isChecked)\n        }}>\n            <label htmlFor=\"togglebox\" className=\"switch-toggle\">\n                <input id=\"togglebox\" type=\"checkbox\" checked={props.isChecked}\n                />\n                <span className={`slider-toggle round-toggle`} />\n            </label>\n        </div>\n    )\n}\n\n\nexport default React.memo(Toggle);","import React, { Component } from 'react'\nimport { GiphyService } from '../service/GiphyService';\nimport Loading from './common/Loading';\nimport SearchInput from './common/SearchInput';\nimport GifyView from './GifyView';\nimport Toggle from './common/Toggle';\nimport { SunIcon, MoonIcon } from '../assets/icons';\n\nexport default class Search extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            searchQuery: \"\",\n            offset: 0,\n            giphyList: [],\n            darkMode: false,\n            isLoading: false,\n            isError: false,\n            initial: true,\n        }\n    }\n\n    getGipyhs = () => {\n        this.setState({ isLoading: true, isError: false })\n\n        const { offset, searchQuery } = this.state\n        GiphyService.getGifs(offset, searchQuery)\n            .then((response) => {\n                return response.json()\n            })\n            .then((result) => {\n                let newList = []\n                if (result && result.data) {\n                    if (offset === 0)\n                        newList = [...result.data]\n                    else\n                        newList = this.state.giphyList.concat(...result.data)\n                }\n                this.setState({ giphyList: newList, isLoading: false })\n            })\n            .catch((error) => {\n                this.setState({ isError: true, isLoading: false })\n            })\n\n    }\n\n    handleScroll = () => {\n        window.onscroll = () => {\n            if (Math.ceil(window.innerHeight + window.pageYOffset) >= document.body.scrollHeight && this.state.searchQuery) {\n                const { offset } = this.state;\n                this.setState({\n                    offset: offset + 25\n                }, () => this.getGipyhs());\n            }\n        }\n    }\n\n    toggleDarkMode = () => {\n        this.setState({ darkMode: !this.state.darkMode },\n            () => {\n                if (this.state.darkMode) {\n                    document.getElementsByTagName(\"html\")[0].className = \"dark\"\n                } else {\n                    document.getElementsByTagName(\"html\")[0].className = \"\"\n                }\n            })\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n\n    render() {\n        return (\n            <div>\n\n                <div className={`search-header ${this.state.darkMode ? \"dark-header\" : \"\"} ${this.state.initial ? \"initial\" : \"\"}`} >\n                    <div className=\"search-header-title\">\n                        <h1 id=\"gifted-header-title\" onClick={() => { this.setState({ initial: true }) }}>GIFted</h1>\n                    </div>\n\n                    <div className=\"search-header-input\">\n                        <SearchInput\n                            placeholder=\"Search for a giphy and press Enter\"\n                            name=\"searchQuery\"\n                            value={this.state.searchQuery}\n                            context={this}\n                            onSubmit={() => {\n                                this.setState({ initial: false, giphyList: [] })\n                                this.getGipyhs()\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"search-header-extra\">\n\n                        <div className=\"toggle-container\">\n                            <div> <SunIcon /> </div>\n                            <div className=\"toggle-container-div\">\n                                <Toggle isChecked={this.state.darkMode}\n                                    onToggle={this.toggleDarkMode}\n                                />\n                            </div>\n                            <div> <MoonIcon /> </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                {\n                    !this.state.initial\n                    &&\n                    <div id=\"giphy-list\" className={`search-result-body ${this.state.darkMode ? \"dark\" : \"\"}`}>\n                        {\n                            this.state.giphyList && this.state.giphyList.map((giphy) =>\n                                <GifyView key={giphy.id} giphy={giphy} />\n                            )\n                        }\n                    </div>\n                }\n                {\n                    this.state.isLoading && <Loading />\n                }\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './index.scss'\nimport Search from './components/Search';\n\nfunction App() {\n  return (\n    <Search />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}